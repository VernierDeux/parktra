diff --git a/src/sync.cpp b/src/sync.cpp
index cc48fc31a..12e896a3f 100644
--- a/src/sync.cpp
+++ b/src/sync.cpp
@@ -58,6 +58,7 @@ typedef std::vector<std::pair<void*, CLockLocation> > LockStack;
 static boost::mutex dd_mutex;
 static std::map<std::pair<void*, void*>, LockStack> lockorders;
 static boost::thread_specific_ptr<LockStack> lockstack;
+static LockStack* lockstack2;
 
 
 static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)
@@ -90,6 +91,7 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)
     dd_mutex.lock();
 
     (*lockstack).push_back(std::make_pair(c, locklocation));
+    (*lockstack2).push_back(std::make_pair(c, locklocation));
 
     if (!fTry) {
         BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, (*lockstack)) {
@@ -119,6 +121,7 @@ static void pop_lock()
     }
     dd_mutex.lock();
     (*lockstack).pop_back();
+    (*lockstack2).pop_back();
     dd_mutex.unlock();
 }
 
@@ -149,4 +152,13 @@ void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine,
     abort();
 }
 
+void PrintLocks()
+{
+    dd_mutex.lock();
+    LogPrintf("PRINTING LOCKS\n");
+    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, (*lockstack2))
+        LogPrintf(" %s\n", i.second.ToString());
+    dd_mutex.unlock();
+}
+